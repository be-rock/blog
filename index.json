[{"content":"Summary I enjoy learning new languages, and decided it would be fun to do some learning the \u0026lsquo;old-school\u0026rsquo; way, meaning no AI-assisted coding, trial-and-error, and using the docs. Note - LLMs will be used merely as a search-engine equivalent to aid with solutions and resolve issues, but not to build a solution. I have worked with numerous languages in the past, but 2 that have been on my radar are go and V. This post will be about V but I hope to do something similar for go. V promises to be stable (despite not yet having reached 1.0 release), easy to learn (\u0026ldquo;can be learned over the course of a weekend\u0026rdquo;), fast, and is statically typed.\nLearning V Getting started Installation Installation is pretty straight-forward, to clone, build from source, and symlink the executable just took a few seconds:\ncd ~/.local/lib time git clone --depth=1 https://github.com/vlang/v cd v time make ... git clone --depth=1 https://github.com/vlang/v 0.60s user 0.77s system 18% cpu 7.314 total ... V has been successfully built V 0.4.11 603cd90 make 6.82s user 0.98s system 61% cpu 12.739 total sudo ./v symlink Creating a project Creating things is one of the best ways to learn. I\u0026rsquo;ll go with the idea of a coin flipper app. It is a simple concept and can be used in a variety of ways to explore the language. I have previously done this with Python as a basis of advancing knowledge of TDD, and several Architectural patterns. A coin flipper is one of the suggestions made in this repo:\nCoin Flip Simulation - Write some code that simulates flipping a single coin however many times the user decides. The code should record the outcomes and count the number of tails and heads. Source: https://github.com/karan/Projects\nThe beauty of a simple concept like this is that it can be the basis for so many things such as adding a REST API, a front-end, a CLI, database interactions, \u0026hellip;\nStarting the project There are numerous types of project templates bundled with the v CLI to get started with. The default is bin. v new --help shows 3 built-in:\n--bin Use the template for an executable application [default]. --lib Use the template for a library project. --web Use the template for a vweb project. I\u0026rsquo;ll start with the default (--lib) because it includes tests.\nv new --lib coin_flipper Input your project description: a coin flipper app Input your project version: (0.0.0) Input your project license: (MIT) Initialising ... Created library project `coin_flipper` tree . ├── coin_flipper │ ├── coin_flipper.v │ ├── tests │ │ └── square_test.v │ └── v.mod └── Makefile 3 directories, 4 files The contents of these files are:\n// coin_flipper/coin_flipper.v module coin_flipper // square calculates the second power of `x` pub fn square(x int) int { return x * x } // coin_flipper/tests/square_test.v import coin_flipper fn test_square() { assert coin_flipper.square(2) == 4 } // v.mod Module { name: \u0026#39;coin_flipper\u0026#39; description: \u0026#39;a coin flipper app\u0026#39; version: \u0026#39;0.0.0\u0026#39; license: \u0026#39;MIT\u0026#39; dependencies: [] } To run the project:\nv run coin_flipper coin_flipper/coin_flipper.v:1:1: error: project must include a `main` module or be a shared library (compile with `v -shared`) Strangely, it does not run. Adding a main.v file seems to resolve this:\n// coin_flipper/main.v import coin_flipper fn main() { println(coin_flipper.square(3)) } v run coin_flipper 9 Ok, we have a successful app that works, although it does not yet flip a coin, it performs some basic useful tasks that we can build upon.\nLearning the language I have spent some time browsing through the docs and testing in the bundled REPL via v repl (or just v, which also defaults to the repl) but usually find it best just to dig in.\nThe first thing I\u0026rsquo;d like to do is build the coin flipping logic into our tests in a TDD sort of manner.\nIn Python, I would probably start with something like:\n# tests/test_app.py def test_app(): import random def coin_flipper() -\u0026gt; str: return random.choice([\u0026#39;heads\u0026#39;, \u0026#39;tails\u0026#39;]) assert coin_flipper() in [\u0026#39;heads\u0026#39;, \u0026#39;tails\u0026#39;] And then run the tests. Upon success, we would move the coin_flipper() to a new module and then import the module into the test_app.py like:\n# tests/test_app.py import coin_flipper def test_app(): assert coin_flipper() in [\u0026#39;heads\u0026#39;, \u0026#39;tails\u0026#39;] Eventually the coin_flipper() function could later be refactored into a CoinFlipper class with a flip_coin() method if needed.\nTo do the same thing in v, this became:\n// tests/coin_flipper_test.v fn flip_coin() !string { return rand.element([\u0026#39;heads\u0026#39;, \u0026#39;tails\u0026#39;])! } fn test_flip_coin() { result := flip_coin()! assert result in [\u0026#39;heads\u0026#39;, \u0026#39;tails\u0026#39;] } Running the tests with v -stats test tests/ succeeded. Through trial and error, I learned about the ! behavior in V and that simply returning type string from the function was not acceptable because rand.element() actually returns !string which, I understand to mean that it can return null or string.\nThe rand module docs say that rand.element\u0026rsquo;s signature is: fn element[T](array []T) !T. I interpret this to mean that element takes an array of any type T and returns type !T which means it can return type T or an error/none.\nSo our fn flip_coin() returns !string to accomodate this. Another way to address this, without the ! symbol would be to add the or {'none'}:\nfn flip_coin() string { return rand.element([\u0026#39;heads\u0026#39;, \u0026#39;tails\u0026#39;]) or {\u0026#39;none\u0026#39;} } fn test_flip_coin() { result := flip_coin() assert result in [\u0026#39;heads\u0026#39;, \u0026#39;tails\u0026#39;] } Once these tests succeed, we can further refactor the code such that the flip_coin function is moved to coin_flipper/coin_flipper.v and then imported to the tests/coin_flipper_test.v such as:\n// coin_flipper/coin_flipper.v module coin_flipper import rand pub fn flip_coin() string { return rand.element([\u0026#39;heads\u0026#39;, \u0026#39;tails\u0026#39;]) or {\u0026#39;none\u0026#39;} } // tests/coin_flipper_test.v import coin_flipper fn test_flip_coin() { result := coin_flipper.flip_coin() assert result in [\u0026#39;heads\u0026#39;, \u0026#39;tails\u0026#39;] } And then main.v simply:\nimport coin_flipper fn main() { println(coin_flipper.flip_coin()) } Running and Compiling the project To run the project, you can v run .. To run and compile, change to v crun .. crun. In my case, the compiled library was coin-flipper-v.\nHere\u0026rsquo;s a quick example of runtime differences between v run in a shell for loop and an execution of the built binary which shows that the binary is, unsurprisingly, considerably faster.\n# ./coin-flipper-v /usr/bin/time -p zsh -c \u0026#39;for i in {1..1000}; do ./coin-flipper-v \u0026gt; /dev/null ; done\u0026#39; real 3.09 user 0.01 sys 0.13 # v run /usr/bin/time -p zsh -c \u0026#39;for i in {1..1000}; do v run . \u0026gt; /dev/null; done\u0026#39; real 427.76 user 0.23 sys 0.26 Expanding the app Once I get a chance, I would like to enhance this app in a few ways such as:\nAdd a web component such as a REST API with veb Provide flexiblity to the app user to give a dynamic number of inputs Write the coin flip results to a SQL database https://modules.vlang.io/db.sqlite.ht This is just a toy app and each of the above components can be expanded upon.\nWrapping up This was a super quick intro to V. It was a language that I had wanted to dive into and have some surface-level knowledge of. I really enjoyed navigating through the docs, reviewing the examples, prototyping in the REPL.\nI\u0026rsquo;ve gotten a better sense of the basic data structures, the project structure and packaging, error handling, and more.\nI felt that the language, thus far, has been intuitive. If a syntax or paradigm was new or unfamiliar, it made sense in a short amount of time with review.\nReference The project code can be found in https://github.com/be-rock/coin-flipper-v\n","permalink":"https://be-rock.github.io/blog/posts/evaluating-vlang/","summary":"\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eI enjoy learning new languages, and decided it would be fun to do some learning the \u0026lsquo;old-school\u0026rsquo; way, meaning no AI-assisted coding, trial-and-error, and using the docs. Note - LLMs will be used merely as a search-engine equivalent to aid with solutions and resolve issues, but \u003cem\u003enot\u003c/em\u003e to build a solution.\u003c/li\u003e\n\u003cli\u003eI have worked with numerous languages in the past, but 2 that have been on my radar are \u003ca href=\"https://go.dev/\"\u003ego\u003c/a\u003e and \u003ca href=\"https://vlang.io/\"\u003eV\u003c/a\u003e. This post will be about \u003ccode\u003eV\u003c/code\u003e but I hope to do something similar for \u003ccode\u003ego\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eV\u003c/code\u003e promises to be stable (despite not yet having reached 1.0 release), easy to learn (\u0026ldquo;can be learned over the course of a weekend\u0026rdquo;), fast, and is statically typed.\u003c/p\u003e","title":"Evaluating V (Language)"},{"content":"Summary Bufstream is said to be a drop-in replacement for Kafka via a simple Go-based binary Bufstream also standardizes on Protocol Buffers as the serialization format for messaging and integrates well with Lakehouses by writing directly to an Iceberg sink What is the point? I often work with streaming and Kafka with Apache Spark. Setting up and managing a Kafka cluster can be cumbersome so having a quick, easy, standardized, and leightweight way to run Kafka is appealing. This blog attempts to test the claims of Buf - the company behind: Bufstream - the \u0026ldquo;drop-in replacement for Kafka\u0026rdquo; BSR - the Buf Schema Registry which implements the Confluent Schema Registry API buf CLI - a simple way to develop and manage Protobuf Note that the buf CLI will be referenced in this blog, but less of a focus.\nGetting Started On a surface-level, I have found the Buf docs to be nice and well written with 4 applicable quickstart guides that will be the basis for getting started https://buf.build/docs/bufstream/quickstart/ https://buf.build/docs/bsr/quickstart/ https://buf.build/docs/cli/quickstart/ https://buf.build/docs/bufstream/iceberg/quickstart/ Bufstream Installation Starting with this Bufstream quickstart guide, we are advised to download the bufstream CLI with curl and then simply ./bufstream serve. Let\u0026rsquo;s see if that\u0026rsquo;s as easy as it sounds.\ncurl -sSL -o bufstream \\ \u0026#34;https://buf.build/dl/bufstream/latest/bufstream-$(uname -s)-$(uname -m)\u0026#34; \u0026amp;\u0026amp; \\ chmod +x bufstream ./bufstream serve ... \u0026lt;snipped\u0026gt; ... time=2025-08-05T22:45:14.648-05:00 level=INFO msg=\u0026#34;kafka server started\u0026#34; host=localhost port=9092 tls=false public=true time=2025-08-05T22:45:14.648-05:00 level=INddFO msg=\u0026#34;kafka server started\u0026#34; host=127.0.0.1 port=9092 tls=false time=2025-08-05T22:45:14.648-05:00 level=INFO msg=\u0026#34;kafka server started\u0026#34; host=::1 port=9092 tls=false time=2025-08-05T22:45:14.664-05:00 level=INFO msg=\u0026#34;updating ownership\u0026#34; oldShardNum=0 oldShardCount=0 shardNum=0 shardCount=1 Ok, that really was quite easy.\nSetting up a web-based Kafka Administrative Console (optional) The quickstart then recommends installing either either AKHQ or Redpanda console for managing Kafka-compatible workloads. The Redpanda installation is a simple 4-liner docker run so I\u0026rsquo;ll give that one a try.\ndocker run -p 8080:8080 \\ -e KAFKA_BROKERS=host.docker.internal:9092 \\ -e KAFKA_CLIENTID=\u0026#34;rpconsole;broker_count=1;host_override=host.docker.internal\u0026#34; \\ docker.redpanda.com/redpandadata/console:v3.1.3 ... \u0026lt;snipped\u0026gt; ... {\u0026#34;level\u0026#34;:\u0026#34;warn\u0026#34;,\u0026#34;ts\u0026#34;:\u0026#34;2025-08-06T03:56:19.199Z\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;failed to test Kafka connection, going to retry in 1s\u0026#34;,\u0026#34;remaining_retries\u0026#34;:5} ... {\u0026#34;level\u0026#34;:\u0026#34;fatal\u0026#34;,\u0026#34;ts\u0026#34;:\u0026#34;2025-08-06T03:56:51.007Z\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;failed to start console service\u0026#34;,\u0026#34;error\u0026#34;:\u0026#34;failed to test kafka connectivity: failed to test kafka connection: failed to request metadata: unable to dial: dial tcp: lookup host.docker.internal on 10.0.2.3:53: no such host\u0026#34;} Hmmm, that did not work as expected. I am testing on Linux and believe that the quickstart presumes we\u0026rsquo;re running MacOS. I have also seen subtle network differences in the past when working with Docker (ok, Podman) on Linux. This eventually worked:\ndocker run --network=host -p 8080:8080 \\ -e KAFKA_BROKERS=localhost:9092 \\ docker.redpanda.com/redpandadata/console:v3.1.3 ... {\u0026#34;level\u0026#34;:\u0026#34;info\u0026#34;,\u0026#34;ts\u0026#34;:\u0026#34;2025-08-06T04:08:00.900Z\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;started Redpanda Console\u0026#34;,\u0026#34;version\u0026#34;:\u0026#34;v3.1.3\u0026#34;,\u0026#34;built_at\u0026#34;:\u0026#34;1753360440\u0026#34;} {\u0026#34;level\u0026#34;:\u0026#34;info\u0026#34;,\u0026#34;ts\u0026#34;:\u0026#34;2025-08-06T04:08:00.903Z\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;connecting to Kafka seed brokers, trying to fetch cluster metadata\u0026#34;,\u0026#34;seed_brokers\u0026#34;:[\u0026#34;localhost:9092\u0026#34;]} {\u0026#34;level\u0026#34;:\u0026#34;info\u0026#34;,\u0026#34;ts\u0026#34;:\u0026#34;2025-08-06T04:08:00.910Z\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;successfully connected to kafka cluster\u0026#34;,\u0026#34;advertised_broker_count\u0026#34;:1,\u0026#34;topic_count\u0026#34;:0,\u0026#34;controller_id\u0026#34;:1234570725,\u0026#34;kafka_version\u0026#34;:\u0026#34;between v0.10.2 and v0.11.0\u0026#34;} {\u0026#34;level\u0026#34;:\u0026#34;info\u0026#34;,\u0026#34;ts\u0026#34;:\u0026#34;2025-08-06T04:08:01.111Z\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;Server listening on address\u0026#34;,\u0026#34;address\u0026#34;:\u0026#34;[::]:8080\u0026#34;,\u0026#34;port\u0026#34;:8080} I was then able to view the Redpanda console in my browser at http://localhost:8080/overview.\nWorking with Protobuf and the BSR Continuing with the quickstart, I cloned the Github repo and moved the previously installed bufstream CLI to the cloned directory.\ngit clone https://github.com/bufbuild/bufstream-demo.git \u0026amp;\u0026amp; \\ mv bufstream ./bufstream-demo \u0026amp;\u0026amp; \\ cd ./bufstream-demo This repo contains pre-created Protobuf files that have integration and support for Confluent-compatabile schema registries (which BSR complies with).\nAn example proto file is in proto/bufstream/demo/v1/demo.proto of the cloned repo and defines an EmailUpdated message.\nThings get a little unclear here but from what I understand, this demo.proto file imports a reference to a confluent module with import \u0026quot;buf/confluent/v1/extensions.proto\u0026quot;; and this is what enables the BSR to be compatible with Confluent schema registry. The mapping between the proto file and the topic is done with name: \u0026quot;email-updated-value\u0026quot;. So the topic name here becomes email-updated.\nProducing and Consuming data The quickstart references a go run ./cmd/bufstream-demo-produce ... and go run ./cmd/bufstream-demo-consume ... but I\u0026rsquo;ve noticed that the cloned repo comes with a Makefile. That would be simpler to use here but the produce/consume commands seem to be out of sync so we\u0026rsquo;ll stick with what the demo suggests to be safe.\ngo run ./cmd/bufstream-demo-produce \\ --topic email-updated \\ --group email-verifier \\ --csr-url \u0026#34;https://demo.buf.dev/integrations/confluent/bufstream-demo\u0026#34; go run ./cmd/bufstream-demo-produce --topic email-updated --group email-verifier go: downloading github.com/brianvoe/gofakeit/v7 v7.3.0 go: downloading github.com/google/uuid v1.6.0 ... \u0026lt;downloading lots of go libs here\u0026gt; ... time=2025-08-06T22:41:20.299-05:00 level=INFO msg=\u0026#34;produced semantically invalid protobuf message\u0026#34; id=072da6ca-8878-4c11-944b-5876a4fc4370 time=2025-08-06T22:41:20.450-05:00 level=INFO msg=\u0026#34;produced invalid data\u0026#34; id=32bc2119-f1bb-43f4-a9db-28fbb04ff7b5 time=2025-08-06T22:41:21.588-05:00 level=INFO msg=\u0026#34;produced semantically valid protobuf message\u0026#34; id=d6fc0bf3-e13b-421f-a696-212059d7961d ... So a lot of data is being generated, some of which is considered semantically invalid. Looking in the RedPanda console, I can see sample data such as foobar as well as other sample data such as $f4525add-da7d-4b2b-aae9-884e7bab535dgarnettwunsch@dickens.netllama, it\u0026rsquo;s clear which of these 2 do not conform to the proto schema.\nNow I\u0026rsquo;ll try the make target make consume-run and see what happens since this is consistent with the snippet in the blog (unlike the produce).\nmake consume-run go run ./cmd/bufstream-demo-consume --topic email-updated --group email-verifier \\ --csr-url \u0026#34;https://demo.buf.dev/integrations/confluent/bufstream-demo\u0026#34; make consume-run go run ./cmd/bufstream-demo-consume --topic email-updated --group email-verifier \\ --csr-url \u0026#34;https://demo.buf.dev/integrations/confluent/bufstream-demo\u0026#34; time=2025-08-06T22:48:44.981-05:00 level=INFO msg=\u0026#34;starting consume\u0026#34; time=2025-08-06T22:48:44.982-05:00 level=INFO msg=\u0026#34;consumed message with new email sisterglover@labadie.biz and old email orvilledickinson@turcotte.biz\u0026#34; time=2025-08-06T22:48:45.984-05:00 level=INFO msg=\u0026#34;consumed message with new email hound and old email antoniomurphy@bradtke.info\u0026#34; time=2025-08-06T22:48:45.984-05:00 level=INFO msg=\u0026#34;consumed malformed data\u0026#34; error=\u0026#34;registration is missing for encode/decode\u0026#34; length=7 ... The log message consumed malformed data makes it sound like the consumer is consuming the data even if it is malformed and does not conform to the schema. This seems unexpected but I may have a misunderstanding on how this works.\nThe quickstart then suggests to run:\n./bufstream serve --config config/bufstream.yaml \u0026hellip;which now seems to tie it all together by ensuring that the consumer has a connection to the BSR and ensuring that the Consumer only sees records that comply with the registered schema. I verified that schema enforcement does seem to be happening here by reviewing the terminal output for the producer and consumer. The Producer shows invalid records (e.g. does not conform to the schema):\n# sample invalid log message from the producer time=2025-08-09T22:36:50.224-05:00 level=ERROR msg=\u0026#34;error on produce of invalid data\u0026#34; error=\u0026#34;failed to produce: INVALID_RECORD: This record has failed the validation on the broker and hence been rejected.\u0026#34; \u0026hellip;but the Consumer logs, only showed valid messages such as:\n# sample valid log message from the consumer time=2025-08-09T22:36:45.222-05:00 level=INFO msg=\u0026#34;consumed message with new email monkey and old email ernestlegros@parisian.name\u0026#34; Bufstream and Apache Spark If Bufstream really is a drop-in replacement for Apache Kafka, reading from Bufstream with Spark should also be straight-forward. Let\u0026rsquo;s confirm this.\nfrom pyspark.sql import DataFrame from pyspark.sql import functions as sf from pyspark.sql.streaming.readwriter import DataStreamWriter from pyspark.sql.streaming.query import StreamingQuery KAFKA_BOOTSTRAP_SERVERS = \u0026#34;localhost:9092\u0026#34; TOPIC = \u0026#34;email-updated\u0026#34; df: DataFrame = ( spark .readStream .format(\u0026#34;kafka\u0026#34;) .option(\u0026#34;kafka.bootstrap.servers\u0026#34;, KAFKA_BOOTSTRAP_SERVERS) .option(\u0026#34;subscribe\u0026#34;, TOPIC) .option(\u0026#34;startingOffsets\u0026#34;, \u0026#34;earliest\u0026#34;) .load() .selectExpr(\u0026#34;CAST(key AS STRING)\u0026#34;, \u0026#34;CAST(value AS STRING)\u0026#34;) ) datastream_writer: DataStreamWriter = ( df .select(\u0026#34;value\u0026#34;) .writeStream .format(\u0026#34;console\u0026#34;) .option(\u0026#34;truncate\u0026#34;, \u0026#34;false\u0026#34;) ) streaming_query: StreamingQuery = datastream_writer.start() ------------------------------------------- Batch: 0 ------------------------------------------- +---------------------------------------------------------------------------------------------+ |value | +---------------------------------------------------------------------------------------------+ |\\n$926b3e7f-0311-4b0e-8925-e49b653e3f95jacqueskoss@lehner.info�alexisgraham@raynor.com | |\\n$c0ec4ae6-d7c0-49d0-96f3-f45e5df45e78jewelrohan@strosin.org�salmon | |foobar | |\\n$a1d8b79c-87c5-4dde-9183-b702e5b5b334marshallreynolds@armstrong.io�ericklittle@lang.name| |\\n$ab20b911-7bee-4fe9-8366-6211766412dfgissellejohnston@runolfsson.org�\\vgrasshopper | |foobar | |\\n$f89d1a48-2d9b-4d77-a872-d39be4c61921rickybechtelar@stamm.net�raoulbeahan@rutherford.io | |\\n$8af0f411-c2ed-494d-ac82-e495b111045austinanitzsche@lebsack.net�\\bplatypus | |foobar | |\\n$a58f1996-c6b2-416b-8531-a603921dd828marisafunk@towne.net�blakerippin@kemmer.biz | |\\n$48fa5f74-5921-4061-ad25-559ce2cb6e7aeleonoreupton@rohan.net�wasp | |foobar ... So this appeared to work at a very basic level, but this is not how we should be performing reads via Spark given that we want our consumers to know and cross-reference the expected schema defined in the BSR. Given that we confirmed this worked as expected with the above Consumer, we will for now presume that this capability is possible with Spark as well and leave the full Spark \u0026ndash;\u0026gt; BSR integration for later research.\nWhat about Iceberg? I followed the Iceberg quickstart but it seems like the compose file is referencing a spark/ directory that doesn\u0026rsquo;t exist: OSError: Dockerfile not found in /home/username/tmp/buf-examples/bufstream/iceberg-quickstart/spark .So I couldn\u0026rsquo;t get this working but according to the guide, all you need is:\nBufstream broker object storage an Iceberg catalog implementation The details of your Iceberg catalog are defined in config/bufstream.yaml.\nWhat about Bufstream in Production? The initial impression I had of Bustream is that deployments are super simple. I suppose this is true, in comparison to a Kafka deployment, but it still requires:\nObject storage such as AWS S3, Google Cloud Storage, or Azure Blob Storage. A metadata storage service such as PostgreSQL. There are numerous different deployment options such as Docker, Helm, and others with a provided Terraform module. It\u0026rsquo;s unclear if BSR requires an additional set of deployments or if that is integrated into Postgres.\nRecap Buf\u0026rsquo;s vision seems well-thought and clearly-defined. A simplified Kafka-compatible streaming engine A single way to manage schemas with Protobuf Schema enforcement with the BSR Data Lakehouse integration with Apache Iceberg The streaming market has no shortage of vended options but Buf\u0026rsquo;s vision really makes it stand out. Protobuf has the reputation for being less user-friendly than other serialization formats like JSON but this may change if the buf CLI can keep it\u0026rsquo;s promises of simplifying the schema mangement experience. ","permalink":"https://be-rock.github.io/blog/posts/kafka-protobuf-and-bufstream/","summary":"\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBufstream is said to be a drop-in replacement for Kafka via a simple Go-based binary\u003c/li\u003e\n\u003cli\u003eBufstream also standardizes on Protocol Buffers as the serialization format for messaging and integrates well with Lakehouses by writing directly to an Iceberg sink\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"what-is-the-point\"\u003eWhat is the point?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eI often work with streaming and Kafka with Apache Spark. Setting up and managing a Kafka cluster can be cumbersome so having a quick, easy, standardized, and leightweight way to run Kafka is appealing.\u003c/li\u003e\n\u003cli\u003eThis blog attempts to test the claims of Buf - the company behind:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eBufstream\u003c/code\u003e - the \u0026ldquo;drop-in replacement for Kafka\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBSR\u003c/code\u003e - the Buf Schema Registry which implements the Confluent Schema Registry API\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebuf\u003c/code\u003e CLI - a simple way to develop and manage Protobuf\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote that the \u003ccode\u003ebuf\u003c/code\u003e CLI will be referenced in this blog, but less of a focus.\u003c/p\u003e","title":"Streaming with Bufstream, Protobuf, and Spark"},{"content":"Summary Running PySpark unit tests in a Container can make for a repeatable, portable way to unit test your code This simple library can be used as a template to create a repeatable set of Pyspark tests for both reference and understanding Why, just why? Hopefully you do not need to be convinced of the value of unit testing; there is really no shortage of content on this topic. If we can agree on that, what I have found in my day-to-day is that I am often in the Spark shell trying to evaluate functions, generate explain plans, and trying to confirm my understanding of internals.\nRather than running these tests on-demand, or add these examples in a notebook, I thought that it would be useful to build up a little library of these commands that can be run using pytest where performance can be evaluated and could also be used as a reference/cheatsheet.\nDoes this library serve any real practical purpose other than learning and understanding? No, not really. But maybe this can be a spring-board for something else\nSetup a basic project structure I find it helpful to use a Makefile to produce a consistent and a well-documented and repeatable build process. The Makefile is in References/Makefile. The basic project structure when completed will be:\n❯ tree . ├── Containerfile ├── Makefile ├── pyproject.toml └── tests └── test_pyspark.py 1 directory, 4 files The container image specification Following is the Containerfile (a Dockerfile would also suffice). The specifications of the container image are:\n# Containerfile FROM ghcr.io/astral-sh/uv:debian # Java is required for PySpark RUN apt-get update \u0026amp;\u0026amp; \\ apt-get install -y openjdk-17-jdk \u0026amp;\u0026amp; \\ apt-get clean \u0026amp;\u0026amp; \\ rm -rf /var/lib/apt/lists/* WORKDIR /app COPY pyproject.toml /app/pyproject.toml RUN uv sync ENV PYSPARK_PYTHON=/usr/bin/python3 COPY tests/ /app/tests/ CMD [\u0026#34;uv\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;.venv/bin/pytest\u0026#34;, \u0026#34;--durations=0\u0026#34;, \u0026#34;-v\u0026#34;, \u0026#34;/app/tests/\u0026#34;] The Python project setup The Python aspect of the app will contain 2 major components, a pyproject.toml and a unit test to get started.\n# pyproject.toml [project] name = \u0026#34;spark-test\u0026#34; version = \u0026#34;0.1.0\u0026#34; description = \u0026#34;Spark unit tests\u0026#34; dependencies = [ \u0026#34;pytest\u0026#34;, \u0026#34;pyspark==3.5.2\u0026#34;, ] And the unit tests:\n# tests/tests_pyspark.py import pytest from pyspark.sql import SparkSession from pyspark.sql import functions as sf from pyspark.sql import types as st @pytest.fixture(scope=\u0026#34;session\u0026#34;) def spark(): spark_session = ( SparkSession.builder .master(\u0026#34;local[*]\u0026#34;) .appName(\u0026#34;pytest-pyspark-testing\u0026#34;) .getOrCreate() ) yield spark_session spark_session.stop() @pytest.fixture def sample_df(spark): data = [(\u0026#34;A\u0026#34;, 10), (\u0026#34;A\u0026#34;, 20), (\u0026#34;B\u0026#34;, 5)] return spark.createDataFrame(data, [\u0026#34;group\u0026#34;, \u0026#34;value\u0026#34;]) def test_spark_range_count(spark): assert spark.range(2).count() == 2 def test_group_and_sum(sample_df): result = ( sample_df .groupBy(\u0026#34;group\u0026#34;) .agg(sf.sum(\u0026#34;value\u0026#34;).alias(\u0026#34;total\u0026#34;)) .where(\u0026#34;group = \u0026#39;A\u0026#39;\u0026#34;) .first() ) assert isinstance(result, st.Row) assert result.total == 30 Note that if iterating quickly and making many test changes, it may be beneficial to directly mount the tests/ directory as a volume so the image does not need to be rebuilt.\nBuild the container image The associated Makefile assumes that you are using podman instead of Docker, but can easily be swapped out if so desired by simply changing the CMD := podman to CMD := docker. Then run:\nmake build-image\nRun the test suite The tests can now be run with make test. The pytest command is invoked with verbose options that include runtime durations.\n❯ make test podman run --rm spark-test warning: No `requires-python` value found in the workspace. Defaulting to `\u0026gt;=3.11`. ============================= test session starts ============================== platform linux -- Python 3.11.2, pytest-8.4.1, pluggy-1.6.0 -- /app/.venv/bin/python cachedir: .pytest_cache rootdir: /app configfile: pyproject.toml collecting ... collected 2 items tests/test_pyspark.py::test_spark_range_count PASSED [ 50%] tests/test_pyspark.py::test_group_and_sum PASSED [100%] ============================== slowest durations =============================== 6.17s call tests/test_pyspark.py::test_spark_range_count 4.89s setup tests/test_pyspark.py::test_spark_range_count 2.37s call tests/test_pyspark.py::test_group_and_sum 0.97s teardown tests/test_pyspark.py::test_group_and_sum 0.16s setup tests/test_pyspark.py::test_group_and_sum (1 durations \u0026lt; 0.005s hidden. Use -vv to show these durations.) ============================== 2 passed in 15.02s ============================== Tips and Considerations Generally it\u0026rsquo;s good to keep test data small and in-memory for fast execution but with Spark there likely will be a need to test file-based sources Use pytest fixtures for re-use If the amount of fixtures become unwieldly, consider putting them in a conftest.py Try to keep tests self-contained as much as possible Provide descriptive names for each of the test functions References Makefile # Makefile .DEFAULT_GOAL := help SHELL := /bin/bash CMD := podman IMAGE_NAME := spark-test help: ## Show this help message @echo -e \u0026#39;Usage: make [target] ...\\n\u0026#39; @echo \u0026#39;targets:\u0026#39; @egrep \u0026#39;^(.+)\\:\\ ##\\ (.+)\u0026#39; ${MAKEFILE_LIST} | column -t -c 2 -s \u0026#39;:#\u0026#39; .PHONY: build-image build-image: ## build the container image $(CMD) build -t $(IMAGE_NAME) . .PHONY: setup setup: ## setup the basic project structure mkdir -p tests/ \u0026amp;\u0026amp; touch pyproject.toml Containerfile tests/test_pyspark.py .PHONY: test test: ## run the unit tests $(CMD) run --rm $(IMAGE_NAME) ","permalink":"https://be-rock.github.io/blog/posts/pyspark-container-unit-tests/","summary":"\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eRunning PySpark unit tests in a Container can make for a repeatable, portable way to unit test your code\u003c/li\u003e\n\u003cli\u003eThis simple library can be used as a template to create a repeatable set of Pyspark tests for both reference and understanding\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"why-just-why\"\u003eWhy, just why?\u003c/h2\u003e\n\u003cp\u003eHopefully you do not need to be convinced of the value of unit testing; there is really no shortage of content on this topic. If we can agree on that, what I have found in my day-to-day is that I am often in the Spark shell trying to evaluate functions, generate explain plans, and trying to confirm my understanding of internals.\u003c/p\u003e","title":"Using a Container to run PySpark Unit Tests"},{"content":"Summary Apache Spark 4.0 and Databricks 15.2 supports custom Pyspark Data Sources A custom data source allows you to connect to a source system that that Spark may not currently have support for PySpark Custom Data Sources - an Overview Starting with Apache Spark 4.0 and Databricks 15.2, PySpark supports custom data sources.\nSo what are PySpark Custom Data Sources?\nCustom data sources allow you to define a source format other than the default built-in formats such as csv, json, and parquet. There are many other supported formats such as Delta and Iceberg, but if there is no community or commercial support offered for the data source of interest, you can extend and inherit some builtin PySpark classes and roll your own. One common example of this may be calling a REST endpoint.\nDuckDB and DuckLake are being discussed a lot lately so I thought it would be fun to see how easy it would be to interact with it from Spark. DuckDB does have an experimental Spark API but that would just be too easy, so let\u0026rsquo;s try to roll our own for educational purposes.\nHow does it work? To use Custom Data Source, we define a class that inherits from DataSource and then a Reader or Writer class inherits from DataSourceReader or DataSourceWriter respectively. These classes all reside in the pyspark.sql.datasource module.\npyspark.sql.datasource ├── DataSource ├── DataSourceReader └── DataSourceWriter There is also a DataSourceStreamReader and DataSourceStreamWriter but we wont touch on them in this blog.\nSetup Setup instructions follow but can also be setup using targets in a sample Makefile shown below in References/Makefile\nInstall the DuckDB CLI\nNote - This is a platform-dependent step so I\u0026rsquo;ll omit this setup instruction here and refer you to the docs instead. Setup the Python environment. Also can be run with make python-setup\nuv venv --python 3.12 source .venv/bin/activate uv pip install duckdb ipython pyspark==4.0.0 Create a quick test table in DuckDb. Can also be run with make duckdb-setup duckdb dev.duckdb create table t1 (c1 int); insert into t1 values (1); Start PySpark use the make target: make start-pyspark source .venv/bin/activate \u0026amp;\u0026amp; \\ PYSPARK_DRIVER_PYTHON_OPTS=\u0026#34;--TerminalInteractiveShell.editing_mode=vi --colors=Linux\u0026#34; PYSPARK_DRIVER_PYTHON=ipython pyspark Define a Data Source Your custom data source must inherit from DataSource and will then be referenced by the custom reader class that will ultimately inherit from DataSourceReader.\nfrom pyspark.sql.datasource import DataSource, DataSourceReader from pyspark.sql.types import StructType class DuckDBDataSource(DataSource): @classmethod def name(cls): return \u0026#34;duckdb\u0026#34; def schema(self): ... def reader(self, schema: str): return DuckDBDataSourceReader(schema, self.options) Define a Data Source Reader This is where much of the magic resides in terms of how the Reader will interact with the DataSource. class DuckDBDataSourceReader(DataSourceReader): def __init__(self, schema, options): self.schema = schema self.options = options def read(self, partition): import duckdb db_path = self.options[\u0026#34;db_path\u0026#34;] query = self.options[\u0026#34;query\u0026#34;] with duckdb.connect(db_path) as conn: cursor = conn.execute(query) for row in cursor.fetchall(): yield tuple(row) Read from a DuckDB source from pyspark.sql import SparkSession spark = SparkSession.builder.getOrCreate() spark.dataSource.register(DuckDBDataSource) ( spark.read .format(\u0026#34;duckdb\u0026#34;) .option(\u0026#34;db_path\u0026#34;, \u0026#34;dev.duckdb\u0026#34;) .option(\u0026#34;query\u0026#34;, \u0026#34;SELECT * FROM t1\u0026#34;) .schema(\u0026#34;c1 int\u0026#34;) .load() ).show() +---+ | c1| +---+ | 1| +---+ Takeaway This blog just scratches the surface of what\u0026rsquo;s possible with Pyspark Custom Data Sources and would need numerous enhancements (obviously) to be used in any serious manner but hopefully gets across the point of the Data Source\u0026rsquo;s capabilities.\nReferences Makefile A Makefile to help simplify the setup # Makefile .DEFAULT_GOAL := help SHELL := /bin/bash help: ## Show this help message @echo -e \u0026#39;Usage: make [target] ...\\n\u0026#39; @echo \u0026#39;targets:\u0026#39; @egrep \u0026#39;^(.+)\\:\\ ##\\ (.+)\u0026#39; ${MAKEFILE_LIST} | column -t -c 2 -s \u0026#39;:#\u0026#39; .PHONY: setup-python setup-python: ## setup python env and dependencies uv venv --python 3.12 .venv source .venv/bin/activate \u0026amp;\u0026amp; uv pip install duckdb ipython pyarrow pyspark==4.0.0 .PHONY: setup-duckdb setup-duckdb: ## setup duckdb database and test table with data duckdb dev.duckdb -c \u0026#34;create table t1 (c1 int); insert into t1 values (1);\u0026#34; .PHONY: setup setup: ## setup python and duckdb setup-python setup-duckdb .PHONY: start-pyspark start-pyspark: ## start-pyspark source .venv/bin/activate \u0026amp;\u0026amp; \\ PYSPARK_DRIVER_PYTHON_OPTS=\u0026#34;--TerminalInteractiveShell.editing_mode=vi --colors=Linux\u0026#34; PYSPARK_DRIVER_PYTHON=ipython pyspark ","permalink":"https://be-rock.github.io/blog/posts/pyspark-custom-datasource-duckdb/","summary":"\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eApache Spark 4.0 and Databricks 15.2 supports custom Pyspark Data Sources\u003c/li\u003e\n\u003cli\u003eA custom data source allows you to connect to a source system that that Spark may not currently have support for\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"pyspark-custom-data-sources---an-overview\"\u003ePySpark Custom Data Sources - an Overview\u003c/h2\u003e\n\u003cp\u003eStarting with \u003ca href=\"https://spark.apache.org/docs/latest/api/python/tutorial/sql/python_data_source.html\"\u003eApache Spark 4.0\u003c/a\u003e and \u003ca href=\"https://docs.databricks.com/aws/en/pyspark/datasources\"\u003eDatabricks 15.2\u003c/a\u003e, PySpark supports custom data sources.\u003c/p\u003e\n\u003cp\u003eSo what \u003cem\u003eare\u003c/em\u003e PySpark Custom Data Sources?\u003c/p\u003e\n\u003cp\u003eCustom data sources allow you to define a source \u003ccode\u003eformat\u003c/code\u003e other than the default built-in formats such as csv, json, and parquet. There are many other supported formats such as Delta and Iceberg, but if there is no community or commercial support offered for the data source of interest, you can extend and inherit some builtin PySpark classes and roll your own. One common example of this may be calling a REST endpoint.\u003c/p\u003e","title":"Building a Pyspark Custom Data Sources for DuckDB"}]