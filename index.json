[{"content":"Summary Apache Spark 4.0 and Databricks 15.2 supports custom Pyspark Data Sources A custom data source allows you to connect to a source system that that Spark may not currently have support for PySpark Custom Data Sources - an Overview Starting with Apache Spark 4.0 and Databricks 15.2, PySpark supports custom data sources.\nSo what are PySpark Custom Data Sources?\nCustom data sources allow you to define a source format other than the default built-in formats such as csv, json, and parquet. There are many other supported formats such as Delta and Iceberg, but if there is no community or commercial support offered for the data source of interest, you can extend and inherit some builtin PySpark classes and roll your own. One common example of this may be calling a REST endpoint.\nDuckDB and DuckLake are being discussed a lot lately so I thought it would be fun to see how easy it would be to interact with it from Spark. DuckDB does have an experimental Spark API but that would just be too easy, so let\u0026rsquo;s try to roll our own for educational purposes.\nHow does it work? To use Custom Data Source, we define a class that inherits from DataSource and then a Reader or Writer class inherits from DataSourceReader or DataSourceWriter respectively. These classes all reside in the pyspark.sql.datasource module.\npyspark.sql.datasource ├── DataSource ├── DataSourceReader └── DataSourceWriter There is also a DataSourceStreamReader and DataSourceStreamWriter but we wont touch on them in this blog.\nSetup Setup instructions follow but can also be setup using targets in a sample Makefile shown below in References/Makefile\nInstall the DuckDB CLI\nNote - This is a platform-dependent step so I\u0026rsquo;ll omit this setup instruction here and refer you to the docs instead. Setup the Python environment. Also can be run with make python-setup\nuv venv --python 3.12 source .venv/bin/activate uv pip install duckdb ipython pyspark==4.0.0 Create a quick test table in DuckDb. Can also be run with make duckdb-setup duckdb dev.duckdb create table t1 (c1 int); insert into t1 values (1); Start PySpark use the make target: make start-pyspark source .venv/bin/activate \u0026amp;\u0026amp; \\ PYSPARK_DRIVER_PYTHON_OPTS=\u0026#34;--TerminalInteractiveShell.editing_mode=vi --colors=Linux\u0026#34; PYSPARK_DRIVER_PYTHON=ipython pyspark Define a Data Source Your custom data source must inherit from DataSource and will then be referenced by the custom reader class that will ultimately inherit from DataSourceReader.\nfrom pyspark.sql.datasource import DataSource, DataSourceReader from pyspark.sql.types import StructType class DuckDBDataSource(DataSource): @classmethod def name(cls): return \u0026#34;duckdb\u0026#34; def schema(self): ... def reader(self, schema: str): return DuckDBDataSourceReader(schema, self.options) Define a Data Source Reader This is where much of the magic resides in terms of how the Reader will interact with the DataSource. class DuckDBDataSourceReader(DataSourceReader): def __init__(self, schema, options): self.schema = schema self.options = options def read(self, partition): import duckdb db_path = self.options[\u0026#34;db_path\u0026#34;] query = self.options[\u0026#34;query\u0026#34;] with duckdb.connect(db_path) as conn: cursor = conn.execute(query) for row in cursor.fetchall(): yield tuple(row) Read from a DuckDB source from pyspark.sql import SparkSession spark = SparkSession.builder.getOrCreate() spark.dataSource.register(DuckDBDataSource) ( spark.read .format(\u0026#34;duckdb\u0026#34;) .option(\u0026#34;db_path\u0026#34;, \u0026#34;dev.duckdb\u0026#34;) .option(\u0026#34;query\u0026#34;, \u0026#34;SELECT * FROM t1\u0026#34;) .schema(\u0026#34;c1 int\u0026#34;) .load() ).show() +---+ | c1| +---+ | 1| +---+ Takeaway This blog just scratches the surface of what\u0026rsquo;s possible with Pyspark Custom Data Sources and would need numerous enhancements (obviously) to be used in any serious manner but hopefully gets across the point of the Data Source\u0026rsquo;s capabilities.\nReferences Makefile A Makefile to help simplify the setup # Makefile # Makefile .DEFAULT_GOAL := help SHELL := /bin/bash help: ## Show this help message @echo -e \u0026#39;Usage: make [target] ...\\n\u0026#39; @echo \u0026#39;targets:\u0026#39; @egrep \u0026#39;^(.+)\\:\\ ##\\ (.+)\u0026#39; ${MAKEFILE_LIST} | column -t -c 2 -s \u0026#39;:#\u0026#39; .PHONY: setup-python setup-python: ## setup python env and dependencies uv venv --python 3.12 .venv source .venv/bin/activate \u0026amp;\u0026amp; uv pip install duckdb ipython pyarrow pyspark==4.0.0 .PHONY: setup-duckdb setup-duckdb: ## setup duckdb database and test table with data duckdb dev.duckdb -c \u0026#34;create table t1 (c1 int); insert into t1 values (1);\u0026#34; .PHONY: setup setup: ## setup python and duckdb setup-python setup-duckdb .PHONY: start-pyspark start-pyspark: ## start-pyspark source .venv/bin/activate \u0026amp;\u0026amp; \\ PYSPARK_DRIVER_PYTHON_OPTS=\u0026#34;--TerminalInteractiveShell.editing_mode=vi --colors=Linux\u0026#34; PYSPARK_DRIVER_PYTHON=ipython pyspark ","permalink":"https://be-rock.github.io/blog/posts/pyspark-custom-datasource-duckdb/","summary":"\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eApache Spark 4.0 and Databricks 15.2 supports custom Pyspark Data Sources\u003c/li\u003e\n\u003cli\u003eA custom data source allows you to connect to a source system that that Spark may not currently have support for\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"pyspark-custom-data-sources---an-overview\"\u003ePySpark Custom Data Sources - an Overview\u003c/h2\u003e\n\u003cp\u003eStarting with \u003ca href=\"https://spark.apache.org/docs/latest/api/python/tutorial/sql/python_data_source.html\"\u003eApache Spark 4.0\u003c/a\u003e and \u003ca href=\"https://docs.databricks.com/aws/en/pyspark/datasources\"\u003eDatabricks 15.2\u003c/a\u003e, PySpark supports custom data sources.\u003c/p\u003e\n\u003cp\u003eSo what \u003cem\u003eare\u003c/em\u003e PySpark Custom Data Sources?\u003c/p\u003e\n\u003cp\u003eCustom data sources allow you to define a source \u003ccode\u003eformat\u003c/code\u003e other than the default built-in formats such as csv, json, and parquet. There are many other supported formats such as Delta and Iceberg, but if there is no community or commercial support offered for the data source of interest, you can extend and inherit some builtin PySpark classes and roll your own. One common example of this may be calling a REST endpoint.\u003c/p\u003e","title":"Building a Pyspark Custom Data Sources for DuckDB"}]